name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}

  build_release:
    name: Build release
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            zip_name: raylib-pointers_linux_x86_64
          - os: macos-latest
            zip_name: raylib-pointers_mac
          - os: windows-latest
            zip_name: raylib-pointers_windows_x86_64
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@v5

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends libglfw3 libglfw3-dev libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libxext-dev libxfixes-dev libwayland-dev libxkbcommon-dev

      - name: Build Project
        uses: threeal/cmake-action@v2.0.0
        with:
          generator: Ninja

      - name: Compress (posix)
        if: matrix.os != 'windows-latest'
        run: |
          cd ./build/
          mkdir ../artifact
          zip -r ../artifact/${{ matrix.zip_name }}.zip librlptr*

      - name: Compress (windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd ./build/
          mkdir ../artifact
          Compress-Archive -Path  librlptr* -Destination ../artifact/${{ matrix.zip_name }}.zip

      - name: Upload
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./artifact/${{ matrix.zip_name }}.zip
          asset_name: ${{ matrix.zip_name }}.zip
          asset_content_type: application/zip
